import path from 'path';
import { config, cacheDir } from './config';
import copyMods from './copy';
import fs from 'fs';
import { promisify } from 'util';
import { exec } from 'child_process';

const execPromise = promisify(exec);
const readdirPromise = promisify(fs.readdir);

const lowerCaseRecursive = async (dir: string) => {
  const contents = await readdirPromise(dir);
  contents.forEach((filename) => {
    const oldPath = path.join(dir, filename);
    const isDir = fs.statSync(oldPath).isDirectory();

    const lowerCaseFilename = filename.toLowerCase();
    const newPath = path.join(dir, lowerCaseFilename);
    if (filename !== lowerCaseFilename) {
      fs.renameSync(oldPath, newPath);
    }

    if (isDir) {
      lowerCaseRecursive(newPath);
    }
  });
}

const downloadWorkshopUpdates = async (modIdList: string[]) => {
  const commands = modIdList.map((modId) => `workshop_download_item ${config.appid} ${modId} validate`).join('\n');
  const command = `// auto-generated by workshop-downloader
@ShutdownOnFailedCommand 0
@NoPromptForPassword 1
login ${config.username} ${config.password}
force_install_dir ${cacheDir}
${commands}
quit`;

  const commandPath = path.join(cacheDir, 'steamcommand');
  fs.writeFileSync(commandPath, command)

  const { stderr, stdout } = await execPromise(`${config.steamCMD} +runscript ${commandPath}`);
  if (stderr !== '') {
    console.error(stderr);
    return;
  }

  const regex = /Success. Downloaded item \d+ to "(.+)"/g;
  let matches;
  const renamePromises = [];
  do {
    matches = regex.exec(stdout);
    if (matches) {
      renamePromises.push(lowerCaseRecursive(matches[1]));
    }
  } while (matches);
  await Promise.all(renamePromises);
};

const sync = async () => {
  const modIdList = Object.values(config.workshopItems);

  await downloadWorkshopUpdates(modIdList);
  copyMods();

  return modIdList;
};

sync().then(() => {
  console.log('Mod updates completed.');
});
